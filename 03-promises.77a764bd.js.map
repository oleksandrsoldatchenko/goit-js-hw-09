{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAqCiH,SAAxGC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAO,CAAEL,WAAUC,SAEzB,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLP,EACFK,EAAQF,GAERG,EAAOH,E,GAERJ,E,IA7CMS,SAASC,cAAc,QAE/BC,iBAAiB,UAGmC,SAA/BC,GAEUA,EAA5BC,iBAGoC,IAApCC,EAAaC,OAAOH,EAAMI,cAAchB,MAAMiB,OAC9CC,EAAYH,OAAOH,EAAMI,cAAcG,KAAKF,OAC5CG,EAAcL,OAAOH,EAAMI,cAAcK,OAAOJ,QAMkB,SAA7CjB,EAAOmB,EAAME,GACxC,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EAErDxB,EAAcwB,EAAUtB,GACrBuB,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAU0B,EAAKD,EAALxB,MACjB0B,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAANJ,EAAM,M,IAEvEK,OAAM,SAAAN,G,IAAGzB,EAAQyB,EAARzB,SAAU0B,EAAKD,EAALxB,MAClB0B,EAAA9B,GAAS+B,OAAOI,QAAQ,sBAAuCF,OAAf9B,EAAS,QAAY8B,OAANJ,EAAM,M,IAGzEzB,GAASmB,C,CAfXa,CAAoBlB,EAAYI,EAAWE,E,IAoCGtB,EAAlC,EAAG,MACdyB,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjBiC,QAAQC,IAAI,uBAAwCL,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAE3D8B,OAAM,SAAAN,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClBiC,QAAQC,IAAI,sBAAqCL,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Імпорт notiflix\nimport Notiflix from 'notiflix';\n\n// Запис константи на форму введення даних\nconst form = document.querySelector('form');\n// Створення слухача на кнопку\nform.addEventListener('submit', createPromiseBtn);\n\n// Отправка форми по натиканню кнопки createPromiseBtn із значеннями введеними у форму\nfunction createPromiseBtn(event) {\n  // Блокування перезавантаження сторінки\n  event.preventDefault();\n\n  // Запис значень записаних в рядки форми у константи\n  const delayValue = Number(event.currentTarget.delay.value);\n  const stepValue = Number(event.currentTarget.step.value);\n  const amountValue = Number(event.currentTarget.amount.value);\n\n  createPromiseAction(delayValue, stepValue, amountValue);\n};\n\n// Функція сворення промісів із спливаючими вікнами відповідно до значень у рядках форми\nfunction createPromiseAction(delay, step, amount) {\n  for (let position = 1; position <= amount; position += 1) {\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n    delay += step;\n  }\n};\n\n// Функція, що на момент сабміту форми викликається \"amount\" разів, підчас виклику до неї передається номер промису (position), враховуючи затримку firstDelay і delay з кроком step\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const data = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(data);\n      } else {\n        reject(data);\n      }\n    }, delay);\n  });\n};\n\n// Один додатковий проміс, що виводиться в console.log зі значеннями з ДЗ\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","data","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayValue","Number","currentTarget","value","stepValue","step","amountValue","amount","position1","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromiseAction","console","log"],"version":3,"file":"03-promises.77a764bd.js.map"}