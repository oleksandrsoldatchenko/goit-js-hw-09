{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAqCiH,SAAxGC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAO,C,SAAEL,E,MAAUC,GAEzB,OAAO,IAAIK,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLP,EACFK,EAAQF,GAERG,EAAOH,EAAK,GAEbJ,EAAM,G,CA7CAS,SAASC,cAAc,SAE/BC,iBAAiB,UAGmC,SAA/BC,GAEUA,EAA5BC,iBAGoC,MAApCC,EAAaC,OAAOH,EAAMI,cAAchB,MAAMiB,OAC9CC,EAAYH,OAAOH,EAAMI,cAAcG,KAAKF,OAC5CG,EAAcL,OAAOH,EAAMI,cAAcK,OAAOJ,QAMkB,SAA7CK,EAAOH,EAAME,GACxC,IAAK,IAAIE,EAAW,EAAGA,GAAYF,EAAQE,GAAY,EAErDzB,EAAcyB,EAAUD,GACrBE,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjByB,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAEzE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClByB,EAAA7B,GAAS8B,OAAOG,QAAQ,sBAAoB9B,QAAiBC,MAAU,IAG3EsB,GAASH,C,CAfXW,CAAoBhB,EAAYI,EAAWE,E,IAoCGtB,EAAlC,EAAG,MACd0B,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjB+B,QAAQC,IAAI,uBAAqBjC,QAAiBC,MAAU,IAE7D4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClB+B,QAAQC,IAAI,sBAAoBjC,QAAeC,MAAU","sources":["src/js/03-promises.js"],"sourcesContent":["// Імпорт notiflix\nimport Notiflix from 'notiflix';\n\n// Запис константи на форму введення даних\nconst form = document.querySelector('.form');\n// Створення слухача на кнопку\nform.addEventListener('submit', createPromiseBtn);\n\n// Отправка форми по натиканню кнопки createPromiseBtn із значеннями введеними у форму\nfunction createPromiseBtn(event) {\n  // Блокування перезавантаження сторінки\n  event.preventDefault();\n\n  // Запис значень записаних в рядки форми у константи\n  const delayValue = Number(event.currentTarget.delay.value);\n  const stepValue = Number(event.currentTarget.step.value);\n  const amountValue = Number(event.currentTarget.amount.value);\n\n  createPromiseAction(delayValue, stepValue, amountValue);\n};\n\n// Функція сворення промісів із спливаючими вікнами відповідно до значень у рядках форми\nfunction createPromiseAction(delay, step, amount) {\n  for (let position = 1; position <= amount; position += 1) {\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n    delay += step;\n  }\n};\n\n// Функція, що на момент сабміту форми викликається \"amount\" разів, підчас виклику до неї передається номер промису (position), враховуючи затримку firstDelay і delay з кроком step\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const data = { position, delay };\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(data);\n      } else {\n        reject(data);\n      }\n    }, delay);\n  });\n};\n\n// Один додатковий проміс, що виводиться в console.log зі значеннями з ДЗ\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","data","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayValue","Number","currentTarget","value","stepValue","step","amountValue","amount","delay1","position1","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$createPromiseAction","console","log"],"version":3,"file":"03-promises.33bb34b1.js.map"}